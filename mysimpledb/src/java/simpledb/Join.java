package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate pred;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple t1 = null;
    private Tuple t2 = null;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        pred = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return pred;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(pred.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
    	return child2.getTupleDesc().getFieldName(pred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
    	 child1.close();
         child2.close();
         super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	child1.rewind();
        child2.rewind();
        t1 = null;
        t2 = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	if (t1 == null)
		{
			if (child1.hasNext())
			{
				t1 = child1.next();
			}
		}
		while(t1 != null)
			{
				while(child2.hasNext())
					{
						t2 = child2.next();
						if(pred.filter(t1, t2))
							{
								
								return joinTuples();
							}
					}
					if(child1.hasNext())
					{
						t1 = child1.next();
					}
					else
					{
						t1 = null;
					}
					child2.rewind();
			}
			return null;
    }
    
    private Tuple joinTuples()
    {
    	Tuple newtup = new Tuple(getTupleDesc());
    	int num1 = (t1.getTupleDesc()).numFields();
    	for (int i = 0; i < num1; i++)
    	{
    		
    		newtup.setField(i, t1.getField(i));
    	}
    	int num2 = (t2.getTupleDesc()).numFields();
    	for (int x = 0; x < num2; x++)
    	{
    		
    		newtup.setField(x + num1, t2.getField(x));
    	}
    	return newtup;
    }

    @Override
    public DbIterator[] getChildren() {
    	DbIterator[] iterarray = {child1, child2};
        return iterarray;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        child1 = children[0];
        child2 = children[1];
    }

}
