Report for Lab 6
----------------

Exercise 1.

1. Briefly explain how logging is done in SimpleDB by describing when log records are written to the log.  Use Eclipse search tools to find all uses of the LogFile methods in the SimpleDB source code.

	First a new LogFile is created in the constructor of the database.  Then a transaction writes a "begin" record to the log when it is starting up (in Transaction.start)
	Whenever we are flushing and updated page, we call LogFile.logWrite to write the "update" record to the log. In flushPage, we also force the log to disk before we flush
	the page to disk to ensure that we have our write ahead logging. writePageData is called when adding a "CLR" or "Update" record to write before and after images to the log.
	readPageData is used by print and rollback to read the before images from the log which will be used to overwrite the afterimages. LogFile.logCheckpoint is called during a
	shutdown to ensure that start up can happen quickly. Finally, when a transaction is committing or aborting, a "commit" (or "abort") record for the transaction is written
	to the log in Transaction.complete. LogFile.preAppend is used before we write to the log, to ensure that we will be writing to the end of the log.Recovery is called upon a
	crash, and force is called as described	below to ensure that we have our write ahead logging.


2. Where is LogFile.force called?  You should include usages inside other LogFile methods.  For each usage, why is it important that force is called?

    LogFile.force is called in a number of places:

	- In Bufferpool.flushPage

		LogFile.force is necessary in flushPage to ensure that we maintain our policy of Write Ahead Logging.  Before we flush any pages out to disk we must
		ensure that we have the corresponding log record also written out to disk to guarantee that we can recover and undo any changes that had been made to
		the page.  Since our ultimate goal is to implement a No Force policy, we want to ensure that we can always recover any changes on disk since we may be
		writing changes to disk made by a transaction that has not yet committed.

	- In LogFile.logAbort and LogFile.Commit

		These two methods are called from Transaction.transactionComplete where, to maintain write ahead logging, before we can commit or abort the transaction,
		we must flush the log to the disk.

	- In LogFile.logCheckpoint

		Forcing our log to disk when we add a checkpoint ensures that we keep our write ahead logging before we flush all pages to disk during our checkpoint. 
		This will always ensure that we have all updates and other changes in the log written to disk before any pages are flushed.

3. Where is setBeforeImage image called?  

    setBeforeImage is called in two places.  First, in the constructor of a HeapPage where it clones the data that was just put into the HeapPage to be the before image
    and in TransactionComplete during a commit when it clones the current data of the page (which has been fully updated since the transaction is comitting) into the old
    data. This is necessary to ensure that the new page data of a committed transaction becomes the before image of the next transaction to work with the page.


Exercise 4.

In answering the next few questions, oncy include method calls in the source code; method calls in the test code can be ignored.

4. Where is BufferPool.flushPage called?  
    
    <Replace this text with your answer>

5. Where is BufferPool.flushPages(tid) called?

    <Replace this text with your answer>

6. Where is BufferPool.flushAllPages called?

    <Replace this text with your answer>

7. To support a NO FORCE, STEAL policy, describe exactly when/where pages should be flushed to disk.

    <Replace this text with your answer>


After you complete the lab, please answer the following questions.  

8. What is your name?  If you work with a partner, be sure to write both of your names.

    Justin Lannin

9. What did you think of this assignment?

    I really enjoyed this assignment, I thought that it was fun to work with the logs and directly see how they can be used during recovery.

10. What was the hardest part of this assignment?

    I think that the most difficult part of this assignment was figuring out the structure of the log and how to navigate it, but the print function really
    helped make that clear.

11. Describe any missing or incomplete elements of your code.

    All tests are passing as of this commit: 12/9/14

    Bonuses attempted after that.

12. Roughly how long did you spend working on this lab?

    I definitely spent a good amount of time working on this lab, but definitely less time than working on lab 5.

Bonuses!

I have also implemented: log truncate in LogFile

